void automation.atualizarStatusCorreios(String dealId)
{
info "=== Iniciando rastreamento sem quebras de linha ===";
info "DealId: " + dealId;
if(dealId == null || dealId == "")
{
	info "ERRO: dealId nulo ou vazio.";
	return;
}
dealDetails = zoho.crm.getRecordById("Deals",dealId.toLong());
if(isEmpty(dealDetails))
{
	info "ERRO: Nenhum registro retornado para o negócio.";
	return;
}
rastreio = dealDetails.get("Nro_Rastreamento_Correios");
if(rastreio == null || isEmpty(rastreio))
{
	info "ERRO: Campo 'Nro_Rastreamento_Correios' vazio.";
	return;
}
info "Código de rastreamento => " + rastreio;
// Credenciais
usuario = "trimaf2020";
codigoAcesso = "4klV3PQhVpEgEx1NQtBgnSZldHpRcOp1fDWXzxof";
cartaoPostagem = "0075526450";
baseUrl = "https://api.correios.com.br/token";
authString = usuario + ":" + codigoAcesso;
encodedAuth = zoho.encryption.base64Encode(authString);
headersToken = Map();
headersToken.put("Authorization","Basic " + encodedAuth);
headersToken.put("Content-Type","application/json");
headersToken.put("Accept","application/json");
bodyToken = Map();
bodyToken.put("numero",cartaoPostagem);
tokenUrl = baseUrl + "/v1/autentica/cartaopostagem";
// 1) Obter token
tokenResponse = invokeurl
[
	url :tokenUrl
	type :POST
	parameters:bodyToken.toString()
	headers:headersToken
];
info "Retorno token => " + tokenResponse;
tokenCorreios = tokenResponse.get("token");
if(tokenCorreios == null || isEmpty(tokenCorreios))
{
	info "ERRO: Não foi possível extrair 'token'.";
	return;
}
// 2) Rastrear objeto
rastreioUrl = "https://api.correios.com.br/srorastro/v1/objetos/" + rastreio + "?resultado=T";
headersRastreio = Map();
headersRastreio.put("Authorization","Bearer " + tokenCorreios);
headersRastreio.put("Accept","application/json");
rastreioResponse = invokeurl
[
	url :rastreioUrl
	type :GET
	headers:headersRastreio
];
info "Retorno rastreamento => " + rastreioResponse;
objetos = rastreioResponse.get("objetos");
if(isEmpty(objetos))
{
	info "ERRO: Resposta sem 'objetos'.";
	return;
}
obj = objetos.get(0);
eventos = obj.get("eventos");
if(isEmpty(eventos))
{
	info "ERRO: Nenhum evento encontrado.";
	return;
}
// 3) Atualizar Status_Correios
ultimoEvento = eventos.get(0);
descUltimo = ultimoEvento.get("descricao");
if(isEmpty(descUltimo))
{
	descUltimo = "Sem descrição do último evento";
}
updMap = Map();
updMap.put("Status_Correios",descUltimo);
updateResp = zoho.crm.updateRecord("Deals",dealId,updMap);
info "Retorno update => " + updateResp;
// 4) Montar Nota sem quebras de linha
conteudoNota = "Eventos de Rastreamento => ";
for each  ev in eventos
{
	dataEvt = ev.get("dtHrCriado");
	if(isEmpty(dataEvt))
	{
		dataEvt = "Data não informada";
	}
	descEvt = ev.get("descricao");
	if(isEmpty(descEvt))
	{
		descEvt = "Sem descrição";
	}
	detalheEvt = ev.get("detalhe");
	if(detalheEvt == null || detalheEvt == "")
	{
		detalheEvt = "";
	}
	else
	{
		detalheEvt = "Detalhes: " + detalheEvt;
	}
	unidade = ev.get("unidade");
	localTxt = "";
	if(!isEmpty(unidade))
	{
		tUni = unidade.get("tipo");
		if(isEmpty(tUni))
		{
			tUni = "Não informada";
		}
		endObj = unidade.get("endereco");
		if(!isEmpty(endObj))
		{
			cid = endObj.get("cidade");
			uf = endObj.get("uf");
			if(isEmpty(cid))
			{
				cid = "Desconhecida";
			}
			if(isEmpty(uf))
			{
				uf = "?";
			}
			localTxt = tUni + " - " + cid + "/" + uf;
		}
		else
		{
			localTxt = tUni + " - (sem endereço)";
		}
	}
	else
	{
		localTxt = "(Unidade não informada)";
	}
	// Usar um separador " | " ou " || " para simular quebra
	// (com espaços e travessão).
	conteudoNota = conteudoNota + " || [Data: " + dataEvt + ", Descrição: " + descEvt + ", Local: " + localTxt;
	if(detalheEvt != "")
	{
		conteudoNota = conteudoNota + ", " + detalheEvt;
	}
	conteudoNota = conteudoNota + "] ";
}
notaMap = Map();
notaMap.put("Parent_Id",dealId);
notaMap.put("Note_Title","Rastreamento Correios - " + rastreio);
notaMap.put("Note_Content",conteudoNota);
notaMap.put("se_module","Deals");
notaResp = zoho.crm.createRecord("Notes",notaMap);
info "Retorno criação de nota => " + notaResp;
info "=== Fim do processo ===";
return;
}
